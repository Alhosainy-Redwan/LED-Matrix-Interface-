 ; ADT
;CLEAR_BUFFER ===== clear keyboard buffer (used only at the beginning of the program)
;MATCH_DATA ===== matching input char with it's data to send to led matrix and save it into data2send variable
;CHECK_CHAR ===== listen for the input from user and put it in AL register and call MATCH_DATA (Esc for exit program) 
;SET_COL  ==== set leds on for the COLUMN and DATA_IN variables
;SETCS (input CABLE)====SET CS PIN OF IC TO HIGH (CABLE DATA0)
;CLCS (input CABLE)=====  CLEAR CS PIN OF IC TO LOW(CABLE DATA0)
;SETCLK (input CABLE)====SET CLK PIN OF IC TO HIGH (CABLE DATA1)
;CLCLK (input CABLE)=====CLEAR CLK PIN OF IC TO LOW(CABLE DATA1)


SETCS     MACRO CABLE
     	  PUSH AX  
          MOV AL,CABLE
          OR AL,01H
          MOV CABLE,AL
          MOV DX,378H
	      OUT DX,AL
          POP  AX
          ENDM
; CLEAR CS PIN OF IC TO LOW(CABLE DATA0)
CLCS      MACRO CABLE
     	  PUSH AX 
          MOV AL,CABLE
          AND AL,0FEH
          MOV CABLE,AL
          MOV DX,378H
	  OUT DX,AL
          POP  AX
          ENDM  
; SET CLK PIN OF IC TO HIGH (CABLE DATA1)
SETCLK    MACRO CABLE
     	  PUSH AX
          MOV AL,CABLE
          OR AL,02H
          MOV CABLE,AL
          MOV DX,378H
	  OUT DX,AL
          POP  AX
          ENDM
; CLEAR CLK PIN OF IC TO LOW(CABLE DATA1)
CLCLK     MACRO CABLE
     	  PUSH AX  
          MOV AL,CABLE
          AND AL,0FDH
          MOV CABLE,AL
          MOV DX,378H
	  OUT DX,AL
          POP  AX
          ENDM        
          .MODEL SMALL
          .STACK 64
          .DATA
TEMP      DB ?
DATA2SEND DB ?,?,?,?,?,?,?,?
CABLE     DB 00h
DATA_IN   DB 00h
COLUMN    DB 00h
TABLE1   DB   00000000B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B ; space
  	     DB   00000000B, 00000000B, 01011111B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B ; !
  	     DB   00000000B, 00000000B, 00000011B, 00000000B, 00000011B, 00000000B, 00000000B, 00000000B ; "
  	     DB   00000000B, 00000000B, 00010100B, 00111110B, 00010100B, 00111110B, 00010100B, 00000000B ; #
 	     DB   00000000B, 00000000B, 00100100B, 01101010B, 00101011B, 00010010B, 00000000B, 00000000B ; $
	     DB   00000000B, 00000000B, 01100011B, 00010011B, 00001000B, 01100100B, 01100011B, 00000000B ; %
	     DB   00000000B, 00000000B, 00110110B, 01001001B, 01010110B, 00100000B, 01010000B, 00000000B ; &
	     DB   00000000B, 00000000B, 00000011B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B ; '
	     DB   00000000B, 00000000B, 00011100B, 00100010B, 01000001B, 00000000B, 00000000B, 00000000B ; (
	     DB   00000000B, 00000000B, 01000001B, 00100010B, 00011100B, 00000000B, 00000000B, 00000000B ; )
	     DB   00000000B, 00000000B, 00101000B, 00011000B, 00001110B, 00011000B, 00101000B, 00000000B ; *
	     DB   00000000B, 00000000B, 00001000B, 00001000B, 00111110B, 00001000B, 00001000B, 00000000B ; + 
	     DB   00000000B, 00000000B, 10110000B, 01110000B, 00000000B, 00000000B, 00000000B, 00000000B ; ,
	     DB   00000000B, 00000000B, 00001000B, 00001000B, 00001000B, 00001000B, 00000000B, 00000000B ; -
   	     DB   00000000B, 00000000B, 01100000B, 01100000B, 00000000B, 00000000B, 00000000B, 00000000B ; .
	     DB   00000000B, 00000000B, 01100000B, 00011000B, 00000110B, 00000001B, 00000000B, 00000000B ; /
	     DB   00000000B, 00000000B, 00111110B, 01000001B, 01000001B, 00111110B, 00000000B, 00000000B ; 0
	     DB   00000000B, 00000000B, 01000010B, 01111111B, 01000000B, 00000000B, 00000000B, 00000000B ; 1
	     DB   00000000B, 00000000B, 01100010B, 01010001B, 01001001B, 01000110B, 00000000B, 00000000B ; 2
	     DB   00000000B, 00000000B, 00100010B, 01000001B, 01001001B, 00110110B, 00000000B, 00000000B ; 3
	     DB   00000000B, 00000000B, 00011000B, 00010100B, 00010010B, 01111111B, 00000000B, 00000000B ; 4
	     DB   00000000B, 00000000B, 00100111B, 01000101B, 01000101B, 00111001B, 00000000B, 00000000B ; 5
	     DB   00000000B, 00000000B, 00111110B, 01001001B, 01001001B, 00110000B, 00000000B, 00000000B ; 6
	     DB   00000000B, 00000000B, 01100001B, 00010001B, 00001001B, 00000111B, 00000000B, 00000000B ; 7
	     DB   00000000B, 00000000B, 00110110B, 01001001B, 01001001B, 00110110B, 00000000B, 00000000B ; 8
	     DB   00000000B, 00000000B, 00000110B, 01001001B, 01001001B, 00111110B, 00000000B, 00000000B ; 9
	     DB   00000000B, 00000000B, 01010000B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B ; :
	     DB   00000000B, 00000000B, 10000000B, 01010000B, 00000000B, 00000000B, 00000000B, 00000000B ; ;
	     DB   00000000B, 00000000B, 00010000B, 00101000B, 01000100B, 00000000B, 00000000B, 00000000B ; <
	     DB   00000000B, 00000000B, 00010100B, 00010100B, 00010100B, 00000000B, 00000000B, 00000000B ; =
	     DB   00000000B, 00000000B, 01000100B, 00101000B, 00010000B, 00000000B, 00000000B, 00000000B ; >
	     DB   00000000B, 00000000B, 00000010B, 01011001B, 00001001B, 00000110B, 00000000B, 00000000B ; ?
	     DB   00000000B, 00000000B, 00111110B, 01001001B, 01010101B, 01011101B, 00001110B, 00000000B ; @
 	     DB   00000000B, 00000000B, 01111110B, 00010001B, 00010001B, 01111110B, 00000000B, 00000000B ; A
         DB   00000000B, 00000000B, 01111111B, 01001001B, 01001001B, 00110110B, 00000000B, 00000000B ; B
         DB   00000000B, 00000000B, 00111110B, 01000001B, 01000001B, 00100010B, 00000000B, 00000000B ; C
         DB   00000000B, 00000000B, 01111111B, 01000001B, 01000001B, 00111110B, 00000000B, 00000000B ; D
         DB   00000000B, 00000000B, 01111111B, 01001001B, 01001001B, 01000001B, 00000000B, 00000000B ; E
         DB   00000000B, 00000000B, 01111111B, 00001001B, 00001001B, 00000001B, 00000000B, 00000000B ; F
         DB   00000000B, 00000000B, 00111110B, 01000001B, 01001001B, 01111010B, 00000000B, 00000000B ; G
         DB   00000000B, 00000000B, 01111111B, 00001000B, 00001000B, 01111111B, 00000000B, 00000000B ; H
         DB   00000000B, 00000000B, 01000001B, 01111111B, 01000001B, 00000000B, 00000000B, 00000000B ; I
         DB   00000000B, 00000000B, 00110000B, 01000000B, 01000001B, 00111111B, 00000000B, 00000000B ; J
         DB   00000000B, 00000000B, 01111111B, 00001000B, 00010100B, 01100011B, 00000000B, 00000000B ; K
         DB   00000000B, 00000000B, 01111111B, 01000000B, 01000000B, 01000000B, 00000000B, 00000000B ; L
         DB   00000000B, 00000000B, 01111111B, 00000010B, 00001100B, 00000010B, 01111111B, 00000000B ; M
         DB   00000000B, 00000000B, 01111111B, 00000100B, 00001000B, 00010000B, 01111111B, 00000000B ; N
         DB   00000000B, 00000000B, 00111110B, 01000001B, 01000001B, 00111110B, 00000000B, 00000000B ; O
         DB   00000000B, 00000000B, 01111111B, 00001001B, 00001001B, 00000110B, 00000000B, 00000000B ; P
         DB   00000000B, 00000000B, 00111110B, 01000001B, 01000001B, 10111110B, 00000000B, 00000000B ; Q
         DB   00000000B, 00000000B, 01111111B, 00001001B, 00001001B, 01110110B, 00000000B, 00000000B ; R
         DB   00000000B, 00000000B, 01000110B, 01001001B, 01001001B, 00110010B, 00000000B, 00000000B ; S
         DB   00000000B, 00000000B, 00000001B, 00000001B, 01111111B, 00000001B, 00000001B, 00000000B ; T
         DB   00000000B, 00000000B, 00111111B, 01000000B, 01000000B, 00111111B, 00000000B, 00000000B ; U
         DB   00000000B, 00000000B, 00001111B, 00110000B, 01000000B, 00110000B, 00001111B, 00000000B ; V
         DB   00000000B, 00000000B, 00111111B, 01000000B, 00111000B, 01000000B, 00111111B, 00000000B ; W
 	     DB   00000000B, 00000000B, 01100011B, 00010100B, 00001000B, 00010100B, 01100011B, 00000000B ; X
 	     DB   00000000B, 00000000B, 00000111B, 00001000B, 01110000B, 00001000B, 00000111B, 00000000B ; Y
         DB   00000000B, 00000000B, 01100001B, 01010001B, 01001001B, 01000111B, 00000000B, 00000000B ; Z
         DB   00000000B, 00000000B, 01111111B, 01000001B, 00000000B, 00000000B, 00000000B, 00000000B ; [
         DB   00000000B, 00000000B, 00000001B, 00000110B, 00011000B, 01100000B, 00000000B, 00000000B ; \ backslash
         DB   00000000B, 00000000B, 01000001B, 01111111B, 00000000B, 00000000B, 00000000B, 00000000B ; ]
         DB   00000000B, 00000000B, 00000010B, 00000001B, 00000010B, 00000000B, 00000000B, 00000000B ; hat
         DB   00000000B, 00000000B, 01000000B, 01000000B, 01000000B, 01000000B, 00000000B, 00000000B ; _
         DB   00000000B, 00000000B, 00000001B, 00000010B, 00000000B, 00000000B, 00000000B, 00000000B ; `
         DB   00000000B, 00000000B, 00100000B, 01010100B, 01010100B, 01111000B, 00000000B, 00000000B ; a
         DB   00000000B, 00000000B, 01111111B, 01000100B, 01000100B, 00111000B, 00000000B, 00000000B ; b
         DB   00000000B, 00000000B, 00111000B, 01000100B, 01000100B, 00101000B, 00000000B, 00000000B ; c
         DB   00000000B, 00000000B, 00111000B, 01000100B, 01000100B, 01111111B, 00000000B, 00000000B ; d
         DB   00000000B, 00000000B, 00111000B, 01010100B, 01010100B, 00011000B, 00000000B, 00000000B ; e
         DB   00000000B, 00000000B, 00000100B, 01111110B, 00000101B, 00000000B, 00000000B, 00000000B ; f
         DB   00000000B, 00000000B, 10011000B, 10100100B, 10100100B, 01111000B, 00000000B, 00000000B ; g
         DB   00000000B, 00000000B, 01111111B, 00000100B, 00000100B, 01111000B, 00000000B, 00000000B ; h
         DB   00000000B, 00000000B, 01000100B, 01111101B, 01000000B, 00000000B, 00000000B, 00000000B ; i
         DB   00000000B, 00000000B, 01000000B, 10000000B, 10000100B, 01111101B, 00000000B, 00000000B ; j
         DB   00000000B, 00000000B, 01111111B, 00010000B, 00101000B, 01000100B, 00000000B, 00000000B ; k
         DB   00000000B, 00000000B, 01000001B, 01111111B, 01000000B, 00000000B, 00000000B, 00000000B ; l
         DB   00000000B, 00000000B, 01111100B, 00000100B, 01111100B, 00000100B, 01111000B, 00000000B ; m
         DB   00000000B, 00000000B, 01111100B, 00000100B, 00000100B, 01111000B, 00000000B, 00000000B ; n
         DB   00000000B, 00000000B, 00111000B, 01000100B, 01000100B, 00111000B, 00000000B, 00000000B ; o
         DB   00000000B, 00000000B, 11111100B, 00100100B, 00100100B, 00011000B, 00000000B, 00000000B ; p
         DB   00000000B, 00000000B, 00011000B, 00100100B, 00100100B, 11111100B, 00000000B, 00000000B ; q
         DB   00000000B, 00000000B, 01111100B, 00001000B, 00000100B, 00000100B, 00000000B, 00000000B ; r
         DB   00000000B, 00000000B, 01001000B, 01010100B, 01010100B, 00100100B, 00000000B, 00000000B ; s
         DB   00000000B, 00000000B, 00000100B, 00111111B, 01000100B, 00000000B, 00000000B, 00000000B ; t
         DB   00000000B, 00000000B, 00111100B, 01000000B, 01000000B, 01111100B, 00000000B, 00000000B ; u
         DB   00000000B, 00000000B, 00011100B, 00100000B, 01000000B, 00100000B, 00011100B, 00000000B ; v
         DB   00000000B, 00000000B, 00111100B, 01000000B, 00111100B, 01000000B, 00111100B, 00000000B ; w
         DB   00000000B, 00000000B, 01000100B, 00101000B, 00010000B, 00101000B, 01000100B, 00000000B ; x
         DB   00000000B, 00000000B, 10011100B, 10100000B, 10100000B, 01111100B, 00000000B, 00000000B ; y
         DB   00000000B, 00000000B, 01100100B, 01010100B, 01001100B, 00000000B, 00000000B, 00000000B ; z
         DB   00000000B, 00000000B, 00001000B, 00110110B, 01000001B, 00000000B, 00000000B, 00000000B ; {
         DB   00000000B, 00000000B, 01111111B, 00000000B, 00000000B, 00000000B, 00000000B, 00000000B ; |
         DB   00000000B, 00000000B, 01000001B, 00110110B, 00001000B, 00000000B, 00000000B, 00000000B ; }
         DB   00000000B, 00000000B, 00001000B, 00000100B, 00001000B, 00000100B, 00000000B, 00000000B ; ~

          .CODE
MAIN      PROC FAR         
          MOV AX,@DATA      
          MOV DS,AX   
          CALL CLEAR_BUFFER 
          CALL MAX_INIT
lp:       CALL CHECK_CHAR      
          CALL SEND_CHAR
          CALL DELAY 
          JMP lp
          MOV AH,4CH        
          INT 21H           
MAIN      ENDP 

;CLEAR_BUFFER====CLEAR KEYBOARD BUFFER USED AT THE BEGINING OF THE PROGRAM

CLEAR_BUFFER PROC            
            MOV AH, 1
			INT 16H
			JZ ENDCB
			MOV AH, 0H ; RETRIEVE KEY FROM BUFFER
			INT 16H
			CALL CLEAR_BUFFER
		ENDCB:  
			RET
CLEAR_BUFFER ENDP

;CHECK_CHAR=====listen for the input from user and put it in AL register and call MATCH_DATA(Esc for exit program)  

CHECK_CHAR PROC
    
            PUSH AX
            MOV AH, 1
			INT 16H
			JZ ENDCC
			MOV AH, 0H ; RETRIEVE KEY FROM BUFFER   			
			INT 16H           
			CMP AL, 27
			JNE CONT
			MOV AH,4CH        
            INT 21H
CONT:		CALL MATCH_DATA
		ENDCC:
		    POP AX
			RET
CHECK_CHAR ENDP
    
    


;ENTER CHARCTER FROM KEYBOARD
;ENTER_CH PROC
	;     MOV TEMP,AH
  ;       MOV AH ,1
   ;      INT 21H
    ;     MOV AH,TEMP
     ;    RET
;ENTER_CH ENDP

;MATCING INPUT CHAR WITH IT'S DATA TO SEND TO LED MATRIX
MATCH_DATA PROC
         MOV TEMP,AH
         PUSH CX
         PUSH SI
         PUSH DI
         PUSH ES
         MOV SI,DS
         MOV ES,SI
         MOV CX,8
         MOV AH,8
	 SUB AL,32
         MOV SI,OFFSET TABLE1
         MUL AH
         ADD SI,AX
         MOV DI,OFFSET DATA2SEND
     REP MOVSB
         MOV AH,TEMP
         POP ES
	 POP DI
         POP SI
         POP CX
         RET         
MATCH_DATA ENDP
; SEND BYTE SERIALLY
SEND_BYTE PROC
         PUSH CX
         PUSH AX
         ;MOV  DX,378H
         MOV CX,8  
         CLCS CABLE
         MOV AL,CABLE
         MOV AH,DATA_IN 
SHEFT:   SHL AH,1
         JC OR_BIT_MASK
         AND AL,7FH
         MOV CABLE,AL
         JMP OUT_
OR_BIT_MASK: 
         OR AL,80H 
         MOV CABLE,AL
         ;AND CABLE,AH
         ;MOV AL,CABLE 
OUT_:    CLCLK CABLE
         MOV AL,CABLE
         NOP
         MOV DX,378H
         OUT DX,AL
         SETCLK CABLE 
         MOV AL,CABLE
         ;SHL DATA_IN,1
         LOOP SHEFT
         POP AX
         POP CX
         RET       
SEND_BYTE ENDP
;SET_COL  === set leds on for the COLUMN and DATA_IN variables
SET_COL  PROC
         PUSH AX
         MOV AL,DATA_IN
         MOV AH,COLUMN
         MOV DATA_IN,AH
         CLCS CABLE
         CALL SEND_BYTE
         MOV DATA_IN,AL
         CALL SEND_BYTE
         SETCS CABLE
         POP AX
         RET
SET_COL  ENDP
;SEND CHARACTER
SEND_CHAR PROC
         PUSH CX
         PUSH AX
         PUSH BX 
         MOV BX,OFFSET DATA2SEND
         MOV CL,1
NEXT:    MOV COLUMN,CL          
         MOV AL,[BX]
         MOV DATA_IN,AL
         CALL SET_COL
         INC CL
         INC BX
         CMP CL,9
         JNE NEXT
         POP BX
         POP AX
         POP CX
         RET
SEND_CHAR ENDP

DELAY   PROC
        PUSH BX
        MOV BX,0FFFFH
DAGINE: DEC BX
        JNZ DAGINE
        POP BX
        RET
DELAY   ENDP

MAX_INIT PROC
        MOV COLUMN,09H  ;max7219_reg_decodeMode
        MOV DATA_IN,00H
        CALL SET_COL
        MOV COLUMN,0AH ;max7219_reg_intensity
        MOV DATA_IN,03H
        CALL SET_COL
        MOV COLUMN,0BH ;max7219_reg_scanLimit
        MOV DATA_IN,07H
        CALL SET_COL
        MOV COLUMN,0CH ;not in shutdown mode
        MOV DATA_IN,01H
        CALL SET_COL
        MOV COLUMN,0FH ;no display test
        MOV DATA_IN,00H
        CALL SET_COL
        RET
MAX_INIT ENDP

          END MAIN